{"version":3,"file":"properties.js","sourceRoot":"","sources":["../../../../src/compile/legend/properties.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,UAAU,EAAC,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAC,mBAAmB,EAAY,MAAM,aAAa,CAAC;AAC3D,OAAO,EAAC,QAAQ,EAAE,eAAe,EAAC,MAAM,YAAY,CAAC;AAGrD,MAAM,UAAU,MAAM,CAAC,MAAc,EAAE,QAA0B;IAC/D,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;IAE3B,IAAI,IAAI,EAAE;QACR,OAAO,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACnC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,SAAoB;IAC7C,IAAI,mBAAmB,CAAC,SAAS,CAAC,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,KAAY,EAAE,MAAc,EAAE,YAA0B;IAE1F,IAAA,kDAAiB,EACjB,sEAA2B,EAC3B,sEAA2B,EAC3B,kEAAyB,EACzB,kEAAyB,CACV;IAEjB,IAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAEvE,IAAI,SAAS,KAAK,YAAY,EAAE;QAC9B,IAAM,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,QAAQ,EAAE;YAC3C,OAAO,oBAAoB,CAAC,KAAK,EAAE,OAAO,EAAE,2BAA2B,EAAE,2BAA2B,CAAC,CAAC;SACvG;aAAM;YACL,OAAO,2BAA2B,CAAC;SACpC;KACF;SAAM;QACL,OAAO,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,yBAAyB,EAAE,yBAAyB,CAAC,CAAC;KACpG;AACH,CAAC;AAED,SAAS,oBAAoB,CAAC,KAAY,EAAE,QAA4B,EAAE,GAAW,EAAE,GAAW;IAChG,IAAM,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;IAC3D,OAAO,EAAC,MAAM,EAAE,WAAS,UAAU,UAAK,GAAG,UAAK,GAAG,MAAG,EAAC,CAAC;AAC1D,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,SAAoB;IAC/C,IAAI,QAAQ,CAAC,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,EAAE;QACzD,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import {LabelOverlap} from 'vega';\nimport {FieldDef, valueArray} from '../../fielddef';\nimport {Legend, LegendConfig} from '../../legend';\nimport {hasContinuousDomain, ScaleType} from '../../scale';\nimport {contains, getFirstDefined} from '../../util';\nimport {Model} from '../model';\n\nexport function values(legend: Legend, fieldDef: FieldDef<string>) {\n  const vals = legend.values;\n\n  if (vals) {\n    return valueArray(fieldDef, vals);\n  }\n  return undefined;\n}\n\nexport function clipHeight(scaleType: ScaleType) {\n  if (hasContinuousDomain(scaleType)) {\n    return 20;\n  }\n  return undefined;\n}\n\nexport function defaultGradientLength(model: Model, legend: Legend, legendConfig: LegendConfig) {\n  const {\n    gradientDirection,\n    gradientHorizontalMaxLength,\n    gradientHorizontalMinLength,\n    gradientVerticalMaxLength,\n    gradientVerticalMinLength\n  } = legendConfig;\n\n  const direction = getFirstDefined(legend.direction, gradientDirection);\n\n  if (direction === 'horizontal') {\n    const orient = getFirstDefined(legend.orient, legendConfig.orient);\n    if (orient === 'top' || orient === 'bottom') {\n      return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\n    } else {\n      return gradientHorizontalMinLength;\n    }\n  } else {\n    return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\n  }\n}\n\nfunction gradientLengthSignal(model: Model, sizeType: 'width' | 'height', min: number, max: number) {\n  const sizeSignal = model.getSizeSignalRef(sizeType).signal;\n  return {signal: `clamp(${sizeSignal}, ${min}, ${max})`};\n}\n\nexport function labelOverlap(scaleType: ScaleType): LabelOverlap {\n  if (contains(['quantile', 'threshold', 'log'], scaleType)) {\n    return 'greedy';\n  }\n  return undefined;\n}\n"]}