{"version":3,"file":"errorbar.js","sourceRoot":"","sources":["../../../src/compositemark/errorbar.ts"],"names":[],"mappings":"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","sourcesContent":["import {Channel} from '../channel';\nimport {Config} from '../config';\nimport {Data} from '../data';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport {Field, FieldDef, isContinuous, isFieldDef, PositionFieldDef} from '../fielddef';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {TitleParams} from '../title';\nimport {AggregatedFieldDef, CalculateTransform, Transform} from '../transform';\nimport {Flag, keys} from '../util';\nimport {Orient} from '../vega.schema';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  filterUnsupportedChannels,\n  GenericCompositeMarkDef,\n  makeCompositeAggregatePartFactory,\n  PartsMixins\n} from './common';\nimport {ErrorBand, ErrorBandDef} from './errorband';\n\nexport const ERRORBAR: 'errorbar' = 'errorbar';\nexport type ErrorBar = typeof ERRORBAR;\n\nexport type ErrorBarExtent = 'ci' | 'iqr' | 'stderr' | 'stdev';\nexport type ErrorBarCenter = 'mean' | 'median';\n\nexport type ErrorBarPart = 'ticks' | 'rule';\n\nexport type ErrorInputType = 'raw' | 'aggregated-upper-lower' | 'aggregated-error';\n\nconst ERRORBAR_PART_INDEX: Flag<ErrorBarPart> = {\n  ticks: 1,\n  rule: 1\n};\n\nexport const ERRORBAR_PARTS = keys(ERRORBAR_PART_INDEX);\n\nexport type ErrorBarPartsMixins = PartsMixins<ErrorBarPart>;\n\nexport interface ErrorBarConfig extends ErrorBarPartsMixins {\n  /**\n   * The center of the errorbar. Available options include:\n   * - `\"mean\"`: the mean of the data points.\n   * - `\"median\"`: the median of the data points.\n   *\n   * __Default value:__ `\"mean\"`.\n   * @hide\n   */\n\n  // center is not needed right now but will be added back to the schema if future features require it.\n  center?: ErrorBarCenter;\n\n  /**\n   * The extent of the rule. Available options include:\n   * - `\"ci\"`: Extend the rule to the confidence interval of the mean.\n   * - `\"stderr\"`: The size of rule are set to the value of standard error, extending from the mean.\n   * - `\"stdev\"`: The size of rule are set to the value of standard deviation, extending from the mean.\n   * - `\"iqr\"`: Extend the rule to the q1 and q3.\n   *\n   * __Default value:__ `\"stderr\"`.\n   */\n  extent?: ErrorBarExtent;\n}\n\nexport type ErrorBarDef = GenericCompositeMarkDef<ErrorBar> &\n  ErrorBarConfig & {\n    /**\n     * Orientation of the error bar.  This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.\n     */\n    orient?: Orient;\n  };\n\nexport interface ErrorBarConfigMixins {\n  /**\n   * ErrorBar Config\n   */\n  errorbar?: ErrorBarConfig;\n}\n\nexport function normalizeErrorBar(\n  spec: GenericUnitSpec<Encoding<string>, ErrorBar | ErrorBarDef>,\n  config: Config\n): NormalizedLayerSpec {\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    markDef,\n    outerSpec\n  } = errorBarParams(spec, ERRORBAR, config);\n\n  const makeErrorBarPart = makeCompositeAggregatePartFactory<ErrorBarPartsMixins>(\n    markDef,\n    continuousAxis,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis,\n    config.errorbar\n  );\n\n  const tick: MarkDef = {type: 'tick', orient: ticksOrient};\n\n  return {\n    ...outerSpec,\n    transform,\n    layer: [\n      ...makeErrorBarPart('ticks', tick, 'lower'),\n      ...makeErrorBarPart('ticks', tick, 'upper'),\n      ...makeErrorBarPart('rule', 'rule', 'lower', 'upper')\n    ]\n  };\n}\n\nfunction errorBarOrientAndInputType(\n  spec: GenericUnitSpec<Encoding<Field>, ErrorBar | ErrorBand | ErrorBarDef | ErrorBandDef>,\n  compositeMark: ErrorBar | ErrorBand\n): {\n  orient: Orient;\n  inputType: ErrorInputType;\n} {\n  const {encoding} = spec;\n\n  if (errorBarIsInputTypeRaw(encoding)) {\n    return {\n      orient: compositeMarkOrient(spec, compositeMark),\n      inputType: 'raw'\n    };\n  }\n\n  const isTypeAggregatedUpperLower: boolean = errorBarIsInputTypeAggregatedUpperLower(encoding);\n  const isTypeAggregatedError: boolean = errorBarIsInputTypeAggregatedError(encoding);\n  const x = encoding.x;\n  const y = encoding.y;\n\n  if (isTypeAggregatedUpperLower) {\n    // type is aggregated-upper-lower\n\n    if (isTypeAggregatedError) {\n      throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');\n    }\n\n    const x2 = encoding.x2;\n    const y2 = encoding.y2;\n\n    if (isFieldDef(x2) && isFieldDef(y2)) {\n      // having both x, x2 and y, y2\n      throw new Error(compositeMark + ' cannot have both x2 and y2');\n    } else if (isFieldDef(x2)) {\n      if (isContinuous(x2) && isFieldDef(x) && isContinuous(x)) {\n        // having x, x2 quantitative and field y, y2 are not specified\n        return {orient: 'horizontal', inputType: 'aggregated-upper-lower'};\n      } else {\n        // having x, x2 that are not both quantitative\n        throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);\n      }\n    } else {\n      // y2 is a FieldDef\n      if (isContinuous(y2 as FieldDef<string>) && isFieldDef(y) && isContinuous(y)) {\n        // having y, y2 quantitative and field x, x2 are not specified\n        return {orient: 'vertical', inputType: 'aggregated-upper-lower'};\n      } else {\n        // having y, y2 that are not both quantitative\n        throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);\n      }\n    }\n  } else {\n    // type is aggregated-error\n\n    const xError = encoding.xError;\n    const xError2 = encoding.xError2;\n    const yError = encoding.yError;\n    const yError2 = encoding.yError2;\n\n    if (isFieldDef(xError2) && !isFieldDef(xError)) {\n      // having xError2 without xError\n      throw new Error(compositeMark + ' cannot have xError2 without xError');\n    }\n\n    if (isFieldDef(yError2) && !isFieldDef(yError)) {\n      // having yError2 without yError\n      throw new Error(compositeMark + ' cannot have yError2 without yError');\n    }\n\n    if (isFieldDef(xError) && isFieldDef(yError)) {\n      // having both xError and yError\n      throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');\n    } else if (isFieldDef(xError)) {\n      if (isContinuous(xError) && isFieldDef(x) && isContinuous(x) && (!isFieldDef(xError2) || isContinuous(xError2))) {\n        // having x, xError, xError2 that are all quantitative, or x and xError that are quantitative without xError2\n        return {orient: 'horizontal', inputType: 'aggregated-error'};\n      } else {\n        // having x, xError, and xError2 that are not all quantitative\n        throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n      }\n    } else {\n      if (\n        isContinuous(yError as FieldDef<string>) &&\n        isFieldDef(y) &&\n        isContinuous(y) &&\n        (!isFieldDef(yError2) || isContinuous(yError2))\n      ) {\n        // having y, yError, yError2 that are all quantitative, or y and yError that are quantitative without yError2\n        return {orient: 'vertical', inputType: 'aggregated-error'};\n      } else {\n        // having y, yError, and yError2 that are not all quantitative\n        throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n      }\n    }\n  }\n}\n\nfunction errorBarIsInputTypeRaw(encoding: Encoding<Field>): boolean {\n  return (\n    (isFieldDef(encoding.x) || isFieldDef(encoding.y)) &&\n    !isFieldDef(encoding.x2) &&\n    !isFieldDef(encoding.y2) &&\n    !isFieldDef(encoding.xError) &&\n    !isFieldDef(encoding.xError2) &&\n    !isFieldDef(encoding.yError) &&\n    !isFieldDef(encoding.yError2)\n  );\n}\n\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding: Encoding<Field>): boolean {\n  return isFieldDef(encoding.x2) || isFieldDef(encoding.y2);\n}\n\nfunction errorBarIsInputTypeAggregatedError(encoding: Encoding<Field>): boolean {\n  return (\n    isFieldDef(encoding.xError) ||\n    isFieldDef(encoding.xError2) ||\n    isFieldDef(encoding.yError) ||\n    isFieldDef(encoding.yError2)\n  );\n}\n\nexport const errorBarSupportedChannels: Channel[] = [\n  'x',\n  'y',\n  'x2',\n  'y2',\n  'xError',\n  'yError',\n  'xError2',\n  'yError2',\n  'color',\n  'detail',\n  'opacity'\n];\n\nexport function errorBarParams<\n  M extends ErrorBar | ErrorBand,\n  MD extends GenericCompositeMarkDef<M> & (ErrorBarDef | ErrorBandDef)\n>(\n  spec: GenericUnitSpec<Encoding<string>, M | MD>,\n  compositeMark: M,\n  config: Config\n): {\n  transform: Transform[];\n  groupby: string[];\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxis: 'x' | 'y';\n  encodingWithoutContinuousAxis: Encoding<string>;\n  ticksOrient: Orient;\n  markDef: MD;\n  outerSpec: {\n    data?: Data;\n    title?: string | TitleParams;\n    name?: string;\n    description?: string;\n    transform?: Transform[];\n    width?: number;\n    height?: number;\n  };\n} {\n  spec = filterUnsupportedChannels<M, MD>(spec, errorBarSupportedChannels, compositeMark);\n\n  // TODO: use selection\n  const {mark, encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: MD = isMarkDef(mark) ? mark : ({type: mark} as MD);\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported(compositeMark));\n  }\n\n  const {orient, inputType} = errorBarOrientAndInputType(spec, compositeMark);\n  const {\n    continuousAxisChannelDef,\n    continuousAxisChannelDef2,\n    continuousAxisChannelDefError,\n    continuousAxisChannelDefError2,\n    continuousAxis\n  } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n\n  const {errorBarSpecificAggregate, postAggregateCalculates} = errorBarAggregationAndCalculation(\n    markDef,\n    continuousAxisChannelDef,\n    continuousAxisChannelDef2,\n    continuousAxisChannelDefError,\n    continuousAxisChannelDefError2,\n    inputType,\n    compositeMark,\n    config\n  );\n\n  const {\n    [continuousAxis]: oldContinuousAxisChannelDef,\n    [continuousAxis + '2']: oldContinuousAxisChannelDef2,\n    [continuousAxis + 'Error']: oldContinuousAxisChannelDefError,\n    [continuousAxis + 'Error2']: oldContinuousAxisChannelDefError2,\n    ...oldEncodingWithoutContinuousAxis\n  } = encoding;\n\n  const {\n    bins,\n    timeUnits,\n    aggregate: oldAggregate,\n    groupby: oldGroupBy,\n    encoding: encodingWithoutContinuousAxis\n  } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n\n  const aggregate: AggregatedFieldDef[] = [...oldAggregate, ...errorBarSpecificAggregate];\n  const groupby: string[] = inputType !== 'raw' ? [] : oldGroupBy;\n\n  return {\n    transform: [\n      ...(outerSpec.transform || []),\n      ...bins,\n      ...timeUnits,\n      ...(!aggregate.length ? [] : [{aggregate, groupby}]),\n      ...postAggregateCalculates\n    ],\n    groupby,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n    markDef,\n    outerSpec\n  };\n}\n\nfunction errorBarAggregationAndCalculation<\n  M extends ErrorBar | ErrorBand,\n  MD extends GenericCompositeMarkDef<M> & (ErrorBarDef | ErrorBandDef)\n>(\n  markDef: MD,\n  continuousAxisChannelDef: PositionFieldDef<string>,\n  continuousAxisChannelDef2: PositionFieldDef<string>,\n  continuousAxisChannelDefError: PositionFieldDef<string>,\n  continuousAxisChannelDefError2: PositionFieldDef<string>,\n  inputType: ErrorInputType,\n  compositeMark: M,\n  config: Config\n): {\n  postAggregateCalculates: CalculateTransform[];\n  errorBarSpecificAggregate: AggregatedFieldDef[];\n} {\n  let errorBarSpecificAggregate: AggregatedFieldDef[] = [];\n  let postAggregateCalculates: CalculateTransform[] = [];\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  if (inputType === 'raw') {\n    const center: ErrorBarCenter = markDef.center\n      ? markDef.center\n      : markDef.extent\n      ? markDef.extent === 'iqr'\n        ? 'median'\n        : 'mean'\n      : config.errorbar.center;\n    const extent: ErrorBarExtent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n\n    if ((center === 'median') !== (extent === 'iqr')) {\n      log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n    }\n\n    if (extent === 'stderr' || extent === 'stdev') {\n      errorBarSpecificAggregate = [\n        {op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName},\n        {op: center, field: continuousFieldName, as: 'center_' + continuousFieldName}\n      ];\n\n      postAggregateCalculates = [\n        {\n          calculate: `datum.center_${continuousFieldName} + datum.extent_${continuousFieldName}`,\n          as: 'upper_' + continuousFieldName\n        },\n        {\n          calculate: `datum.center_${continuousFieldName} - datum.extent_${continuousFieldName}`,\n          as: 'lower_' + continuousFieldName\n        }\n      ];\n    } else {\n      if (markDef.center && markDef.extent) {\n        log.warn(log.message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));\n      }\n\n      errorBarSpecificAggregate = [\n        {op: extent === 'ci' ? 'ci0' : 'q1', field: continuousFieldName, as: 'lower_' + continuousFieldName},\n        {op: extent === 'ci' ? 'ci1' : 'q3', field: continuousFieldName, as: 'upper_' + continuousFieldName}\n      ];\n    }\n  } else {\n    if (markDef.center || markDef.extent) {\n      log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n    }\n\n    if (inputType === 'aggregated-upper-lower') {\n      postAggregateCalculates = [\n        {calculate: `datum.${continuousFieldName}`, as: `lower_` + continuousFieldName},\n        {calculate: `datum.${continuousAxisChannelDef2.field}`, as: `upper_` + continuousFieldName}\n      ];\n    } else if (inputType === 'aggregated-error') {\n      postAggregateCalculates = [\n        {\n          calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError.field}`,\n          as: `upper_` + continuousFieldName\n        }\n      ];\n\n      if (continuousAxisChannelDefError2) {\n        postAggregateCalculates.push({\n          calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError2.field}`,\n          as: `lower_` + continuousFieldName\n        });\n      } else {\n        postAggregateCalculates.push({\n          calculate: `datum.${continuousFieldName} - datum.${continuousAxisChannelDefError.field}`,\n          as: `lower_` + continuousFieldName\n        });\n      }\n    }\n  }\n  return {postAggregateCalculates, errorBarSpecificAggregate};\n}\n"]}